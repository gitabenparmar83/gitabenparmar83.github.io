{"version":3,"sources":["AddDialog.js","App.js","serviceWorker.js","index.js"],"names":["AddDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillReceiveProps","nextProps","editData","setState","firstName","lastName","score","visible","isVisible","handleChange","e","defineProperty","target","name","value","handleOk","onSubmit","state","key","_this$state","react_default","a","createElement","modal","title","onOk","onCancel","handleClose","closable","input","placeholder","onChange","type","Component","App","onDelete","data","leaderBoard","i","findIndex","d","splice","onEdit","length","concat","toConsumableArray","_this2","columns","dataIndex","sorter","b","sortDirections","render","href","onClick","style","margin","textAlign","es_button","src_AddDialog","table","dataSource","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1675fca6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Modal, Input } from \"antd\";\r\n\r\nclass AddDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: props.isVisible,\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      score: \"\"\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps = nextProps => {\r\n    if (nextProps.editData) {\r\n      this.setState({\r\n        firstName: nextProps.editData.firstName,\r\n        lastName: nextProps.editData.lastName,\r\n        score: nextProps.editData.score\r\n      });\r\n    }\r\n    this.setState({ visible: nextProps.isVisible });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleOk = () => {\r\n    this.props.onSubmit({\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName,\r\n      score: this.state.score,\r\n      key: this.props.editData ? this.props.editData.key : -1\r\n    });\r\n    this.setState({ firstName: \"\", lastName: \"\", score: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { visible, firstName, lastName, score } = this.state;\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title=\"Add Leader\"\r\n          visible={visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.props.handleClose}\r\n          closable={false}\r\n        >\r\n          <Input\r\n            value={firstName}\r\n            placeholder=\"Enter First Name\"\r\n            name=\"firstName\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Input\r\n            value={lastName}\r\n            placeholder=\"Enter Last Name\"\r\n            name=\"lastName\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Input\r\n            value={score}\r\n            type=\"number\"\r\n            placeholder=\"Enter Score\"\r\n            name=\"score\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddDialog;\r\n","import React, { Component } from \"react\";\nimport { Table, Button } from \"antd\";\nimport AddDialog from \"./AddDialog\";\n\nimport \"antd/dist/antd.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leaderBoard: [],\n      editData: \"\",\n      isVisible: false\n    };\n  }\n\n  onDelete = data => {\n    const { leaderBoard } = this.state;\n    const i = leaderBoard.findIndex(d => d.key === data.key);\n    if (i !== -1) {\n      leaderBoard.splice(i, 1);\n      this.setState(state => ({ leaderBoard: leaderBoard }));\n    }\n  };\n\n  onEdit = data => {\n    this.setState({ editData: data, isVisible: true });\n  };\n\n  handleClose = () => {\n    this.setState({ isVisible: false, editData: \"\" });\n  };\n\n  onSubmit = data => {\n    data.name = data.firstName + \", \" + data.lastName;\n    debugger;\n    if (this.state.editData) {\n      let { leaderBoard } = this.state;\n      const i = leaderBoard.findIndex(d => d.key === data.key);\n      if (i !== -1) {\n        leaderBoard[i] = data;\n        this.setState({ leaderBoard, isVisible: false, editData: \"\" });\n      }\n    } else {\n      data.key = this.state.leaderBoard.length;\n      this.setState(state => ({\n        leaderBoard: [...state.leaderBoard, data],\n        isVisible: false,\n        editData: \"\"\n      }));\n    }\n  };\n\n  render() {\n    const { leaderBoard, isVisible, editData } = this.state;\n\n    const columns = [\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n        sorter: (a, b) => a.name.length - b.name.length,\n        sortDirections: [\"descend\", \"ascend\"]\n      },\n      {\n        title: \"Score\",\n        dataIndex: \"score\",\n        key: \"score\",\n        sorter: (a, b) => a.score - b.score\n      },\n      {\n        title: \"Action\",\n        dataIndex: \"\",\n        key: \"x\",\n        render: data => (\n          <div>\n            <a href=\"javascript:;\" onClick={() => this.onDelete(data)}>\n              Delete\n            </a>\n            &nbsp;&nbsp;\n            <a href=\"javascript:;\" onClick={() => this.onEdit(data)}>\n              Edit\n            </a>\n          </div>\n        )\n      }\n    ];\n    return (\n      <div style={{ margin: 25 }}>\n        <div style={{ textAlign: \"right\" }}>\n          <Button\n            onClick={() => {\n              this.setState({ isVisible: true });\n            }}\n          >\n            Add\n          </Button>\n        </div>\n        <br />\n        <AddDialog\n          isVisible={isVisible}\n          editData={editData}\n          handleClose={this.handleClose}\n          onSubmit={this.onSubmit}\n        />\n        <Table columns={columns} dataSource={leaderBoard} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}